<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from videoray_pro4.urdf.xacro       | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="rov_example" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <!-- Some pretty colors -->
  <material name="blue">
    <color rgba="0.0 0.0 0.8 1.0"/>
  </material>
  <material name="green">
    <color rgba="0.0 0.8 0.0 1.0"/>
  </material>
  <material name="grey">
    <color rgba="0.7 0.7 0.7 1.0"/>
  </material>
  <material name="grey2">
    <color rgba="0.9 0.9 0.9 1.0"/>
  </material>
  <material name="red">
    <color rgba="0.8 0.0 0.0 1.0"/>
  </material>
  <material name="orange">
    <color rgba="1.0 0.5 0.0 1.0"/>
  </material>
  <material name="white">
    <color rgba="1.0 1.0 1.0 1.0"/>
  </material>
  <material name="black">
    <color rgba="0.05 0.05 0.05 1.0"/>
  </material>
  <!-- Provide the propeller mesh in a separate file with the rotation axis
  over propeller's frame X-axis in DAE (Collada) or STL format.
-->
  <!-- <xacro:property name="prop_mesh_file" value="file://$(find uuv_descriptions_example)/models/rov_example/mesh/propeller.dae"/> -->
  <!-- Vehicle's parameters -->
  <!-- Rigid body description of the base link -->
  <link name="videoray_pro4/base_link">
    <inertial>
      <mass value="6.123497"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0" ixy="0" ixz="0" iyy="0" iyz="0" izz="0"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://videoray_description/meshes/videoray_pro4.stl" scale="1 1 1"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://videoray_description/meshes/videoray_pro4.stl" scale="1 1 1"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="videoray_pro4/base_link">
    <selfCollide>false</selfCollide>
  </gazebo>
  <link name="videoray_pro4/ned_link">
    <visual>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0.0" ixz="0.0" iyy="0.000000017" iyz="0.0" izz="0.000000017"/>
    </inertial>
  </link>
  <joint name="ned_joint" type="revolute">
    <!-- This is revolute and not static since gazebo would remove ned_link -->
    <origin rpy="3.14159 0 0" xyz="0 0 0"/>
    <parent link="videoray_pro4/base_link"/>
    <child link="videoray_pro4/ned_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
  </joint>
  <!-- Set up hydrodynamic plugin -->
  <gazebo>
    <plugin filename="libunderwater_object_ros_plugin.so" name="videoray_pro4_uuv_plugin">
      <!-- Fluid density to be used in the computation of buoyancy forces
        for all links specified below -->
      <fluid_density>1000</fluid_density>
      <!-- Name of the current velocity topic -->
      <flow_velocity_topic>hydrodynamics/current_velocity</flow_velocity_topic>
      <!-- Debug flag, if set to true, added-mass, damping and restoring
        forces and moments will be published in separate topics -->
      <debug>0</debug>
      <!-- List of hydrodynamic models this robot's links -->
      <link name="videoray_pro4/base_link">
        <!-- This flag will make the link neutrally buoyant -->
        <neutrally_buoyant>0</neutrally_buoyant>
        <!-- Link's volume -->
        <volume>0.0031093918</volume>
        <!-- Link's bounding box, it is used to recalculate the immersed
          volume when close to the surface.
          This is a workaround the invalid bounding box given by Gazebo-->
        <box>
          <width>0.289</width>
          <length>0.375</length>
          <height>0.223</height>
        </box>
        <!-- Center of buoyancy -->
        <center_of_buoyancy>0 0 0.15</center_of_buoyancy>
        <hydrodynamic_model>
          <type>fossen</type>
          <added_mass>
              0 0 0 0 0 0
              0 0 0 0 0 0
              0 0 0 0 0 0
              0 0 0 0 0 0
              0 0 0 0 0 0
              0 0 0 0 0 0
            </added_mass>
          <linear_damping>
              0 0 0 0 0 0
            </linear_damping>
        </hydrodynamic_model>
      </link>
    </plugin>
  </gazebo>
  <!-- Include the thruster modules -->
  <!-- <xacro:include filename="$(find videoray_description)/urdf/videoray_pro4_thrusters.xacro"/> -->
  <!--
    Dummy link as place holder for the thruster frame,
    since thrusters can often be inside the collision geometry
    of the vehicle and may cause internal collisions if set otherwise
-->
  <link name="videoray_pro4/thruster_0">
    <!-- <visual>
        <geometry>
          <mesh filename="${prop_mesh_file}" scale=".25 .25 .25" />
        </geometry>
    </visual> -->
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0.0" ixz="0.0" iyy="0.000000017" iyz="0.0" izz="0.000000017"/>
    </inertial>
  </link>
  <!-- Joint between thruster link and vehicle base link -->
  <joint name="videoray_pro4/thruster_0_joint" type="continuous">
    <origin rpy="0 0 0" xyz="0.025 0 .1"/>
    <axis xyz="1 0 0"/>
    <parent link="videoray_pro4/base_link"/>
    <child link="videoray_pro4/thruster_0"/>
  </joint>
  <gazebo>
    <!-- Thruster ROS plugin -->
    <plugin filename="libthruster_ros_plugin.so" name="videoray_pro4_0_thruster_model">
      <!-- Name of the thruster link -->
      <linkName>videoray_pro4/thruster_0</linkName>
      <!-- Name of the joint between thruster and vehicle base link -->
      <jointName>videoray_pro4/thruster_0_joint</jointName>
      <!-- Thruster force output topic name -->
      <thrustTopic>videoray_pro4/thrusters/0/thrust</thrustTopic>
      <!-- Thruster commmand input topic name -->
      <inputTopic>videoray_pro4/thrusters/0/input</inputTopic>
      <!-- Gain of the input command signal -->
      <gain>1</gain>
      <!-- Maximum allowed input value for the input signal for thruster unit -->
      <clampMax>2</clampMax>
      <!-- Minimum allowed value for the input signal for thruster unit -->
      <clampMin>0</clampMin>
      <thrust_efficiency>1</thrust_efficiency>
      <propeller_efficiency>1</propeller_efficiency>
      <!-- Simple zero-order model -->
      <dynamics>
        <type>ZeroOrder</type>
      </dynamics>
      <conversion>
        <type>Basic</type>
        <rotorConstant>10</rotorConstant>
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="videoray_pro4/thruster_0">
    <selfCollide>false</selfCollide>
  </gazebo>
  <!--
    Dummy link as place holder for the thruster frame,
    since thrusters can often be inside the collision geometry
    of the vehicle and may cause internal collisions if set otherwise
-->
  <link name="videoray_pro4/thruster_1">
    <!-- <visual>
        <geometry>
          <mesh filename="${prop_mesh_file}" scale=".25 .25 .25" />
        </geometry>
    </visual> -->
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0.0" ixz="0.0" iyy="0.000000017" iyz="0.0" izz="0.000000017"/>
    </inertial>
  </link>
  <!-- Joint between thruster link and vehicle base link -->
  <joint name="videoray_pro4/thruster_1_joint" type="continuous">
    <origin rpy="0 -1.57 0" xyz="-.1525 .1 0"/>
    <axis xyz="1 0 0"/>
    <parent link="videoray_pro4/base_link"/>
    <child link="videoray_pro4/thruster_1"/>
  </joint>
  <gazebo>
    <!-- Thruster ROS plugin -->
    <plugin filename="libthruster_ros_plugin.so" name="videoray_pro4_1_thruster_model">
      <!-- Name of the thruster link -->
      <linkName>videoray_pro4/thruster_1</linkName>
      <!-- Name of the joint between thruster and vehicle base link -->
      <jointName>videoray_pro4/thruster_1_joint</jointName>
      <!-- Thruster force output topic name -->
      <thrustTopic>videoray_pro4/thrusters/1/thrust</thrustTopic>
      <!-- Thruster commmand input topic name -->
      <inputTopic>videoray_pro4/thrusters/1/input</inputTopic>
      <!-- Gain of the input command signal -->
      <gain>1</gain>
      <!-- Maximum allowed input value for the input signal for thruster unit -->
      <clampMax>2</clampMax>
      <!-- Minimum allowed value for the input signal for thruster unit -->
      <clampMin>0</clampMin>
      <thrust_efficiency>1</thrust_efficiency>
      <propeller_efficiency>1</propeller_efficiency>
      <!-- Simple zero-order model -->
      <dynamics>
        <type>ZeroOrder</type>
      </dynamics>
      <conversion>
        <type>Basic</type>
        <rotorConstant>10</rotorConstant>
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="videoray_pro4/thruster_1">
    <selfCollide>false</selfCollide>
  </gazebo>
  <!--
    Dummy link as place holder for the thruster frame,
    since thrusters can often be inside the collision geometry
    of the vehicle and may cause internal collisions if set otherwise
-->
  <link name="videoray_pro4/thruster_2">
    <!-- <visual>
        <geometry>
          <mesh filename="${prop_mesh_file}" scale=".25 .25 .25" />
        </geometry>
    </visual> -->
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0.0" ixz="0.0" iyy="0.000000017" iyz="0.0" izz="0.000000017"/>
    </inertial>
  </link>
  <!-- Joint between thruster link and vehicle base link -->
  <joint name="videoray_pro4/thruster_2_joint" type="continuous">
    <origin rpy="0 -1.57 0" xyz="-.1525 -.1 0"/>
    <axis xyz="1 0 0"/>
    <parent link="videoray_pro4/base_link"/>
    <child link="videoray_pro4/thruster_2"/>
  </joint>
  <gazebo>
    <!-- Thruster ROS plugin -->
    <plugin filename="libthruster_ros_plugin.so" name="videoray_pro4_2_thruster_model">
      <!-- Name of the thruster link -->
      <linkName>videoray_pro4/thruster_2</linkName>
      <!-- Name of the joint between thruster and vehicle base link -->
      <jointName>videoray_pro4/thruster_2_joint</jointName>
      <!-- Thruster force output topic name -->
      <thrustTopic>videoray_pro4/thrusters/2/thrust</thrustTopic>
      <!-- Thruster commmand input topic name -->
      <inputTopic>videoray_pro4/thrusters/2/input</inputTopic>
      <!-- Gain of the input command signal -->
      <gain>1</gain>
      <!-- Maximum allowed input value for the input signal for thruster unit -->
      <clampMax>2</clampMax>
      <!-- Minimum allowed value for the input signal for thruster unit -->
      <clampMin>0</clampMin>
      <thrust_efficiency>1</thrust_efficiency>
      <propeller_efficiency>1</propeller_efficiency>
      <!-- Simple zero-order model -->
      <dynamics>
        <type>ZeroOrder</type>
      </dynamics>
      <conversion>
        <type>Basic</type>
        <rotorConstant>10</rotorConstant>
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="videoray_pro4/thruster_2">
    <selfCollide>false</selfCollide>
  </gazebo>
  <!-- Mount a 3D pose sensor -->
  <gazebo>
    <plugin filename="libgazebo_ros_p3d.so" name="pose_3d_plugin">
      <robotNamespace>videoray_pro4</robotNamespace>
      <bodyName>videoray_pro4/base_link</bodyName>
      <topicName>pose_gt</topicName>
      <frameName>world</frameName>
      <gaussianNoise>0.0</gaussianNoise>
      <updateRate>30</updateRate>
    </plugin>
  </gazebo>
  <link name="videoray_pro4/dvl_link">
    <inertial>
      <mass value="0.001"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0" ixz="0" iyy="0.000000017" iyz="0" izz="0.000000017"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="file:///home/andrew/Development/underwater_ws/install/share/uuv_sensor_plugins/mesh/dvl.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.570795 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="videoray_pro4/dvl_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="videoray_pro4/base_link"/>
    <child link="videoray_pro4/dvl_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <link name="videoray_pro4/dvl_sonar0_link">
    <inertial>
      <mass value="0.001"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0" ixz="0" iyy="0.000000017" iyz="0" izz="0.000000017"/>
    </inertial>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.570795 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="videoray_pro4/dvl_sonar0_joint" type="revolute">
    <origin rpy="0 -0.52 0.0" xyz="0 0 0"/>
    <parent link="videoray_pro4/dvl_link"/>
    <child link="videoray_pro4/dvl_sonar0_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo reference="videoray_pro4/dvl_sonar0_link">
    <sensor name="dvl_sonar0" type="ray">
      <pose>0 0 0 0 0 0</pose>
      <update_rate>1</update_rate>
      <visualize>false</visualize>
      <ray>
        <scan>
          <horizontal>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </horizontal>
          <vertical>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </vertical>
        </scan>
        <range>
          <min>5</min>
          <max>500</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
      <plugin filename="libgazebo_ros_range.so" name="dvl_sonar0">
        <gaussianNoise>0.005</gaussianNoise>
        <alwaysOn>true</alwaysOn>
        <updateRate>1</updateRate>
        <topicName>dvl_sonar0</topicName>
        <frameName>videoray_pro4/dvl_sonar0_link</frameName>
        <fov>0.06</fov>
        <radiation>ultrasound</radiation>
      </plugin>
    </sensor>
  </gazebo>
  <link name="videoray_pro4/dvl_sonar1_link">
    <inertial>
      <mass value="0.001"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0" ixz="0" iyy="0.000000017" iyz="0" izz="0.000000017"/>
    </inertial>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.570795 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="videoray_pro4/dvl_sonar1_joint" type="revolute">
    <origin rpy="0 0 0.52" xyz="0 0 0"/>
    <parent link="videoray_pro4/dvl_link"/>
    <child link="videoray_pro4/dvl_sonar1_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo reference="videoray_pro4/dvl_sonar1_link">
    <sensor name="dvl_sonar1" type="ray">
      <pose>0 0 0 0 0 0</pose>
      <update_rate>1</update_rate>
      <visualize>false</visualize>
      <ray>
        <scan>
          <horizontal>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </horizontal>
          <vertical>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </vertical>
        </scan>
        <range>
          <min>5</min>
          <max>500</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
      <plugin filename="libgazebo_ros_range.so" name="dvl_sonar1">
        <gaussianNoise>0.005</gaussianNoise>
        <alwaysOn>true</alwaysOn>
        <updateRate>1</updateRate>
        <topicName>dvl_sonar1</topicName>
        <frameName>videoray_pro4/dvl_sonar1_link</frameName>
        <fov>0.06</fov>
        <radiation>ultrasound</radiation>
      </plugin>
    </sensor>
  </gazebo>
  <link name="videoray_pro4/dvl_sonar2_link">
    <inertial>
      <mass value="0.001"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0" ixz="0" iyy="0.000000017" iyz="0" izz="0.000000017"/>
    </inertial>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.570795 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="videoray_pro4/dvl_sonar2_joint" type="revolute">
    <origin rpy="0 0.52 0.0" xyz="0 0 0"/>
    <parent link="videoray_pro4/dvl_link"/>
    <child link="videoray_pro4/dvl_sonar2_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo reference="videoray_pro4/dvl_sonar2_link">
    <sensor name="dvl_sonar2" type="ray">
      <pose>0 0 0 0 0 0</pose>
      <update_rate>1</update_rate>
      <visualize>false</visualize>
      <ray>
        <scan>
          <horizontal>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </horizontal>
          <vertical>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </vertical>
        </scan>
        <range>
          <min>5</min>
          <max>500</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
      <plugin filename="libgazebo_ros_range.so" name="dvl_sonar2">
        <gaussianNoise>0.005</gaussianNoise>
        <alwaysOn>true</alwaysOn>
        <updateRate>1</updateRate>
        <topicName>dvl_sonar2</topicName>
        <frameName>videoray_pro4/dvl_sonar2_link</frameName>
        <fov>0.06</fov>
        <radiation>ultrasound</radiation>
      </plugin>
    </sensor>
  </gazebo>
  <link name="videoray_pro4/dvl_sonar3_link">
    <inertial>
      <mass value="0.001"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0" ixz="0" iyy="0.000000017" iyz="0" izz="0.000000017"/>
    </inertial>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.570795 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="videoray_pro4/dvl_sonar3_joint" type="revolute">
    <origin rpy="0 0.0 -0.52" xyz="0 0 0"/>
    <parent link="videoray_pro4/dvl_link"/>
    <child link="videoray_pro4/dvl_sonar3_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo reference="videoray_pro4/dvl_sonar3_link">
    <sensor name="dvl_sonar3" type="ray">
      <pose>0 0 0 0 0 0</pose>
      <update_rate>1</update_rate>
      <visualize>false</visualize>
      <ray>
        <scan>
          <horizontal>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </horizontal>
          <vertical>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </vertical>
        </scan>
        <range>
          <min>5</min>
          <max>500</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
      <plugin filename="libgazebo_ros_range.so" name="dvl_sonar3">
        <gaussianNoise>0.005</gaussianNoise>
        <alwaysOn>true</alwaysOn>
        <updateRate>1</updateRate>
        <topicName>dvl_sonar3</topicName>
        <frameName>videoray_pro4/dvl_sonar3_link</frameName>
        <fov>0.06</fov>
        <radiation>ultrasound</radiation>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo>
    <plugin filename="libuuv_gazebo_ros_dvl.so" name="libuuv_gazebo_dvl_plugin">
      <robotNamespace>videoray_pro4</robotNamespace>
      <!-- (string, required): ros namespace in which the messages are published -->
      <linkName>videoray_pro4/dvl_link</linkName>
      <!-- (string, required): name of the body which holds the IMU sensor -->
      <sensorTopic>dvl</sensorTopic>
      <!-- (string): name of the sensor output topic and prefix of service names -->
      <updatePeriod>0.1</updatePeriod>
      <!-- Update period [s] -->
      <velocityNoise>0.001</velocityNoise>
      <!-- std dev of position estimates in x, y, z [m/s] -->
    </plugin>
  </gazebo>
  <link name="videoray_pro4/rpt_link">
    <inertial>
      <mass value="0.001"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0" ixz="0" iyy="0.000000017" iyz="0" izz="0.000000017"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="file:///home/andrew/Development/underwater_ws/install/share/uuv_sensor_plugins/mesh/rpt.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.570795 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="videoray_pro4/rpt_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="videoray_pro4/base_link"/>
    <child link="videoray_pro4/rpt_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo>
    <plugin filename="libuuv_gazebo_ros_rpt.so" name="libuuv_gazebo_rpt_plugin">
      <robotNamespace>videoray_pro4</robotNamespace>
      <!-- ros namespace in which the messages are published -->
      <linkName>videoray_pro4/rpt_link</linkName>
      <!-- sensor link name -->
      <referenceFrame>ssbl</referenceFrame>
      <!-- name of the refernce frame of all position measurements -->
      <sensorTopic>rpt</sensorTopic>
      <!-- name of the sensor output topic and prefix of service name -->
      <updatePeriod>2</updatePeriod>
      <!-- Update period [s] -->
      <positionNoise>1.0</positionNoise>
      <!-- std dev of position estimates in x, y, z [m] -->
    </plugin>
  </gazebo>
  <link name="videoray_pro4/pressure_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.015"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="file:///home/andrew/Development/underwater_ws/install/share/uuv_sensor_plugins/mesh/pressure.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.570795 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="videoray_pro4/pressure_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="videoray_pro4/base_link"/>
    <child link="videoray_pro4/pressure_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo>
    <plugin filename="libuuv_gazebo_ros_subseapressure.so" name="libuuv_gazebo_subseapressure_plugin">
      <robotNamespace>videoray_pro4</robotNamespace>
      <!-- (string, required): ros namespace in which the messages are published -->
      <linkName>videoray_pro4/pressure_link</linkName>
      <!-- (string, required): name of the body which holds the IMU sensor -->
      <sensorTopic>pressure</sensorTopic>
      <!-- (string): name of the sensor output topic and prefix of service names (defaults to imu) -->
      <updatePeriod>0.02</updatePeriod>
      <!-- Update period of accelerometer and gyroscope [s] -->
      <range>30000</range>
      <!-- measurement range [kPa] -->
      <stddev>3.0</stddev>
      <!-- measurement stddev [kPa] -->
      <estimateDepth>false</estimateDepth>
      <!-- infer depth? -->
      <standardPressure>101.325</standardPressure>
      <!-- pressure at sea level (depth 0 m) [kPa] -->
      <kPaPerM>9.80638</kPaPerM>
      <!-- increase in pressure [kPa] per [m] in increased depth -->
    </plugin>
  </gazebo>
  <!-- IMU link -->
  <link name="videoray_pro4/imu_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.015"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
    <visual>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.570795 0" xyz="0 0 0"/>
    </collision>
  </link>
  <!-- IMU joint -->
  <joint name="videoray_pro4/imu_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="videoray_pro4/base_link"/>
    <child link="videoray_pro4/imu_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo>
    <plugin filename="libuuv_gazebo_ros_imu.so" name="libuuv_gazebo_imu_plugin">
      <!-- A good description of the IMU parameters can be found in the kalibr documentation:
           https://github.com/ethz-asl/kalibr/wiki/IMU-Noise-Model-and-Intrinsics -->
      <robotNamespace>videoray_pro4</robotNamespace>
      <!-- (string, required): ros namespace in which the messages are published -->
      <linkName>videoray_pro4/imu_link</linkName>
      <!-- (string, required): name of the body which holds the IMU sensor -->
      <sensorTopic>imu</sensorTopic>
      <!-- (string): name of the sensor output topic and prefix of service names (defaults to imu) -->
      <gyroscopeNoiseDensity>0.0003394</gyroscopeNoiseDensity>
      <!-- Gyroscope noise density (two-sided spectrum) [rad/s/sqrt(Hz)] -->
      <gyroscopeRandomWalk>3.8785e-05</gyroscopeRandomWalk>
      <!-- Gyroscope bias random walk [rad/s/s/sqrt(Hz)] -->
      <gyroscopeBiasCorrelationTime>1000.0</gyroscopeBiasCorrelationTime>
      <!-- Gyroscope bias correlation time constant [s] -->
      <gyroscopeTurnOnBiasSigma>0.0087</gyroscopeTurnOnBiasSigma>
      <!-- Gyroscope turn on bias standard deviation [rad/s] -->
      <accelerometerNoiseDensity>0.004</accelerometerNoiseDensity>
      <!-- Accelerometer noise density (two-sided spectrum) [m/s^2/sqrt(Hz)] -->
      <accelerometerRandomWalk>0.006</accelerometerRandomWalk>
      <!-- Accelerometer bias random walk. [m/s^2/s/sqrt(Hz)] -->
      <accelerometerBiasCorrelationTime>300.0</accelerometerBiasCorrelationTime>
      <!-- Accelerometer bias correlation time constant [s] -->
      <accelerometerTurnOnBiasSigma>0.196</accelerometerTurnOnBiasSigma>
      <!-- Accelerometer turn on bias standard deviation [m/s^2] -->
      <orientationNoise>0.01</orientationNoise>
      <updatePeriod>0.02</updatePeriod>
      <!-- Update period of accelerometer and gyroscope [s] -->
    </plugin>
  </gazebo>
  <!-- Sensor link -->
  <link name="videoray_pro4/camera_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="file:///home/andrew/Development/underwater_ws/install/share/uuv_sensor_plugins/mesh/oe14-372.dae" scale="1.0 1.0 1.0"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.570795 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="videoray_pro4/camera_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0.15 0 0"/>
    <parent link="videoray_pro4/base_link"/>
    <child link="videoray_pro4/camera_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo reference="videoray_pro4/camera_link">
    <sensor name="camera" type="camera">
      <update_rate>30</update_rate>
      <camera name="camera">
        <horizontal_fov>1.5125</horizontal_fov>
        <image>
          <width>768</width>
          <height>492</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.05</near>
          <far>3000</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.02</stddev>
        </noise>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camera_controller">
        <updateRate>30</updateRate>
        <cameraName>videoray_pro4/camera</cameraName>
        <frameName>videoray_pro4/camera_link</frameName>
        <attenuationR>0.0</attenuationR>
        <attenuationG>0.0</attenuationG>
        <attenuationB>0.0</attenuationB>
        <backgroundR>0</backgroundR>
        <backgroundG>0</backgroundG>
        <backgroundB>0</backgroundB>
        <!-- required for ros depth cam -->
        <imageTopicName>camera_image</imageTopicName>
        <pointCloudTopicName>camera_cloud</pointCloudTopicName>
        <depthImageTopicName>camera_depth</depthImageTopicName>
        <depthImageCameraInfoTopicName>camera_depth_info</depthImageCameraInfoTopicName>
        <pointCloudCutoff>10.0</pointCloudCutoff>
      </plugin>
    </sensor>
  </gazebo>
  <!-- Joint state publisher plugin -->
  <gazebo>
    <plugin filename="libjoint_state_publisher.so" name="joint_state_publisher">
      <robotNamespace>videoray_pro4</robotNamespace>
      <updateRate>50</updateRate>
    </plugin>
  </gazebo>
</robot>

